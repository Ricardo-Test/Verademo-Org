parameters:
  json_file: ''
  issue_type: ''
  organization: ''
  project_name: ''
  Ticket_Title_Prefix: 'Veracode SCA - '
  Azure_Base_Directory: 'https://dev.azure.com'
  Overview_Name: 'Overview'
  Vulnerability_Types_Name: 'Vulnerability Types'
  Library_Source_Name: 'Library Source'
  Vulnerable_Library_Name: 'Vulnerable Library'
  Version_Range_Name: 'Version Range'
  Recommended_Version_Name: 'Recommended Version'
  CVSS_Score_Name: 'CVSS Score'
  CVE_Name: 'CVE'
  Veracode_Database_Link_Name: 'Veracode Database Link'
  Vulnerable_Methods_Name: 'Vulnerable Methods'
  
steps:
- task: PowerShell@2
  name: ReadJsonFile
  inputs:
    targetType: 'inline'
    script: |
      $SCA_JSON = Get-Content ${{ parameters.json_file }}
      $SCA_JSON = $SCA_JSON | ConvertFrom-Json
      $VULNERABILITIES_JSON = $SCA_JSON.records.vulnerabilities
      $VULNERABILITIES_JSON = $VULNERABILITIES_JSON | ConvertTo-Json -Depth 10 -Compress
      $VULNERABILITIES_JSON = $VULNERABILITIES_JSON.Replace("'", "")
      Write-Host "##vso[task.setvariable variable=VULNERABILITIES_AS_JSON;isOutput=true]$VULNERABILITIES_JSON"
      $VULNERABLE_METHODS_JSON = $SCA_JSON.records.vulnMethods
      $VULNERABLE_METHODS_JSON = $VULNERABLE_METHODS_JSON | ConvertTo-Json -Depth 10 -Compress
      $VULNERABLE_METHODS_JSON = $VULNERABLE_METHODS_JSON.Replace("'", "")
      Write-Host "##vso[task.setvariable variable=VULNERABLE_METHODS_AS_JSON;isOutput=true]$VULNERABLE_METHODS_JSON"
      
- task: CmdLine@2
  name: CreateTickets
  env:
    API_CREDENTIALS: $(AZURE_API_CREDENTIALS)
    VULNERABILITIES_AS_JSON:  $(ReadJsonFile.VULNERABILITIES_AS_JSON)
    VULNERABLE_METHODS_AS_JSON:  $(ReadJsonFile.VULNERABLE_METHODS_AS_JSON)
  inputs:
    script: |      
      createApiUrl="${{ parameters.Azure_Base_Directory }}/${{ parameters.organization }}/${{ parameters.project_name }}/_apis/wit/workitems/"'$'"${{ parameters.issue_type }}?api-version=6.0"
      getWorkItemApiUrl="${{ parameters.Azure_Base_Directory }}/${{ parameters.organization }}/${{ parameters.project_name }}/_apis/wit/wiql?api-version=6.1-preview.2"
      Authentication="anything:$API_CREDENTIALS"
      referenceIndex=0
      callsIndex=1
      
      calledClassIndex=0
      calledMethodIndex=1
      methodDescriptorIndex=2
      callChainIndex=3
      
      declare -a VulnerableMethods
      methodIndex=0
      for vulnerableMethod in $(echo "${VULNERABLE_METHODS_AS_JSON}" | jq -r '. | @base64'); do        
        vulnerableMethodAsJson=$(echo "$vulnerableMethod" | base64 --decode)
        
        ref=$( jq -r  '.links[0].ref' <<< "${vulnerableMethodAsJson}")
        ref=$( tr -d '"' <<< $ref )
        
        declare -A vulnerableMethod
        vulnerableMethod[$referenceIndex]=$ref        
        
        declare -a calls
        callIndex=0
        for callEncoded in $(echo "${vulnerableMethodAsJson}" | jq -r '.calls[] | @base64'); do
          callAsJson=$(echo "$callEncoded" | base64 --decode)
          calledClass=$( jq -r  '.method.className' <<< "${callAsJson}" )
          calledMethod=$( jq -r  '.method.methodName' <<< "${callAsJson}" ) 
          methodDescriptor=$( jq -r  '.method.descriptor' <<< "${callAsJson}" ) 
          callChain="THIS IS A CALL CHAIN!"
                    
          declare -A call
          call[$calledClassIndex]=$calledClass 
          call[$calledMethodIndex]=$calledMethod 
          call[$methodDescriptorIndex]=$methodDescriptor 
          call[$callChainIndex]=$callChain
          calls[$callIndex]=${call[@]}
          echo Calls: "${calls[@]}"
          currentCall="${calls[$callIndex]}"
          echo added call: "${currentCall[@]}"
          let "callIndex++"
        done      
        vulnerableMethod[$callsIndex]=${calls[@]}
        vulnerableMethods[$methodIndex]=${vulnerableMethod[@]}
        let "methodIndex++"
      done
      echo "With @: ${vulnerableMethods[@]}"
      first=${vulnerableMethods[0]}
      echo "First With @: ${first[@]}"
      echo "First ref @: ${first[$referenceIndex]}"
      first=${vulnerableMethods[1]}
      echo "Second With @: ${first[@]}"
      echo "Second ref @: ${first[$referenceIndex]}"
      
      
      for encodedVulnerability in $(echo "${VULNERABILITIES_AS_JSON}" | jq -r '.[] | @base64'); do
        vulnerabilityAsJson=$(echo "$encodedVulnerability" | base64 --decode)
        
        title=$( jq -r  '.title' <<< "${vulnerabilityAsJson}" ) 
        overview=$( jq -r '.overview' <<< "${vulnerabilityAsJson}" ) 
        overview=$( tr "\\\"" "'"<<< "${overview}" )
        echo $overview
        cve=$( jq -c  '.cve' <<< "${vulnerabilityAsJson}" )         
        
        if [[ $cve == "null" ]]; then 
          cveContent="none"
        else
          cveWithoutQuotes=$( tr -d '"' <<< $cve ) 
          cveLink="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-$cveWithoutQuotes"
          cveLink='\"'"$cveLink"'\"'
          cveContent="<a href=$cveLink>$cveWithoutQuotes</a>"
        fi
        
        vulnerabilityTypes=$( jq -c '.vulnerabilityTypes[]' <<< "${vulnerabilityAsJson}" )
        vulnerabilityTypes=$( tr -d '"' <<< $vulnerabilityTypes ) 
        vulnerabilityTypesAsString=""
        if [[ $vulnerabilityTypes == "" ]]; then 
          vulnerabilityTypesAsString=""
        else
          for vulnerabilityType in $vulnerabilityTypes; do
            vulnerabilityTypesAsString="$vulnerabilityTypesAsString, $vulnerabilityType"
          done
          vulnerabilityTypesAsString=${vulnerabilityTypesAsString:2}   
        fi
        
        cveWithoutQuotes=$( tr -d '"' <<< "$cve")
        versionRange=$( jq -c  '.libraries[0].details[0].versionRange' <<< "${vulnerabilityAsJson}" )
        versionRange=$( tr -d '"' <<< $versionRange )
        updateToVersion=$( jq -c  '.libraries[0].details[0].updateToVersion' <<< "${vulnerabilityAsJson}" )
        updateToVersion=$( tr -d '"' <<< $updateToVersion )
        
        if [[ $updateToVersion == "" ]]; then 
          updateToVersion="none"
        fi
        if [[ $updateToVersion == "null" ]]; then 
          updateToVersion="none"
        fi
        
        link=$( jq -c  '._links.html' <<< "${vulnerabilityAsJson}" )
        vulnerabilityLink=$( tr -d '"' <<< $link )
        databaseApiLink="https://api.sourceclear.com/artifacts/components/${vulnerabilityLink##*/}"
        vulnerabilityLink='\"'"$vulnerabilityLink"'\"'
        
        databaseApiResult=$( curl --silent $databaseApiLink )
        coordOne=$( jq -c  '.artifactComponents[0].coordOne' <<< "${databaseApiResult}" )
        coordTwo=$( jq -c  '.artifactComponents[0].coordTwo' <<< "${databaseApiResult}" )
        libraryName=$coordOne.$coordTwo
        libraryName=$( tr -d '"' <<< $libraryName )
        librarySource=$( jq -c  '.artifactComponents[0].componentCoordinateType' <<< "${databaseApiResult}" )
        librarySource=$( tr -d '"' <<< $librarySource )
        
        cvssScore=$( jq -c '.cvssScore' <<< "${vulnerabilityAsJson}" ) 
       
        ticketTitle="${{ parameters.Ticket_Title_Prefix }}$title - $libraryName"     
        
        getWorkItemQuery="{\"query\": \"Select [System.Title] From WorkItems Where [System.WorkItemType] = '${{ parameters.issue_type }}' AND [State] <> 'Closed' AND [State] <> 'Removed' AND [System.Title] = '$ticketTitle'\"}"
        workItemQueryResult=$(curl --silent -X POST -H 'Content-Type: application/json' -u "$Authentication" -d "$getWorkItemQuery" $getWorkItemApiUrl)
        existingWorkItems=$( jq -c  '.workItems' <<< "${workItemQueryResult}" )
        
        if [[ "$existingWorkItems" = "" ||  "$existingWorkItems" = "[]" ]];  then
          description="<ul><li>${{ parameters.Overview_Name }}: $overview</li><li>${{ parameters.Library_Source_Name }}: $librarySource</li><li>${{ parameters.Vulnerable_Library_Name }}: $libraryName</li><li>${{ parameters.Version_Range_Name }}: $versionRange</li><li>${{ parameters.Recommended_Version_Name }}: $updateToVersion</li><li>${{ parameters.CVSS_Score_Name }}: $cvssScore</li><li>${{ parameters.CVE_Name }}: $cveContent</li><li>${{ parameters.Vulnerability_Types_Name }}: $vulnerabilityTypesAsString</li><li><a href=$vulnerabilityLink>${{ parameters.Veracode_Database_Link_Name }}</a></li>"
          reference=$( jq -c  '.libraries[0]._links.ref' <<< "${vulnerabilityAsJson}" )
          reference=$( tr -d '"' <<< $reference )
          echo Current element: $reference
          set -x
          for vulnerableMethods in "${VulnerableMethod[@]}"; do 
            echo ${existingVulnerableMethod[@]}
            currentMethodReference=${existingVulnerableMethod[reference]}
            echo "Checking method: $currentMethodReference"
            if [[ "$currentMethodReference" = "$reference" ]];  then
              description="$description<li><h2>${{ parameters.Vulnerable_Methods_Name }}</h2><h3>${existingVulnerableMethod['calls'][@]}</h3></li>"
            fi
          done
          set +x
          
          description=$( tr '"' '\"' <<<"$description</ul>" )
          Body='[{
            "op": "add",
            "path": "/fields/System.Title",
            "value": "'"$ticketTitle"'"
          },
          {
            "op": "add",
            "path": "/fields/System.Description",
            "value": "'"$description"'"
          }]'

          curl --silent -X POST -H 'Content-Type: application/json-patch+json' -u "$Authentication" -d "$Body" $createApiUrl

          echo Ticket created.
          echo Title: $ticketTitle
          echo Description: $description
        else
          echo Duplicate work item found for title $ticketTitle
        fi
        
        
        echo --------------------------
        echo ""
      done
